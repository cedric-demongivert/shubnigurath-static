{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.ad07fb10a4eb0f262be2.hot-update.js","sources":["webpack:///./typescript/SkillSet.ts"],"sourcesContent":["import { List } from 'immutable'\r\n\r\nimport { Pair } from './data/Pair'\r\nimport { bissect } from './data/bissect'\r\n\r\nimport { Skill } from './Skill'\r\nimport { Value } from './Value'\r\n\r\n/**\r\n * \r\n */\r\nfunction comparePair(left: Pair<Skill, Value>, right: Pair<Skill, Value>) {\r\n  return Skill.compare(left.left, right.left)\r\n}\r\n\r\n/**\r\n * \r\n */\r\nfunction compareSkillWithPair(left: Skill, right: Pair<Skill, Value>) {\r\n  return Skill.compare(left, right.left)\r\n}\r\n\r\n/**\r\n * \r\n */\r\nexport class SkillSet {\r\n  /**\r\n   * \r\n   */\r\n  public readonly entries: List<Pair<Skill, Value>>\r\n\r\n  /**\r\n   * \r\n   */\r\n  public static EMPTY: SkillSet = new SkillSet(List())\r\n\r\n  /**\r\n   * \r\n   */\r\n  public static empty(): SkillSet {\r\n    return SkillSet.EMPTY\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public static create(entries: Iterable<Pair<Skill, Value>>): SkillSet {\r\n    const result: List<Pair<Skill, Value>> = List().asMutable()\r\n\r\n    for (const entry of entries) {\r\n      result.push(entry)\r\n    }\r\n\r\n    return result.size > 0 ? new SkillSet(result.sort(comparePair).asImmutable()) : SkillSet.EMPTY\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public static wrap(entries: List<Pair<Skill, Value>>): SkillSet {\r\n    return new SkillSet(entries)\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  private constructor(entries: List<Pair<Skill, Value>>) {\r\n    this.entries = entries\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public indexOf(skill: Skill): number {\r\n    return bissect.list(this.entries, skill, compareSkillWithPair)\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public has(skill: Skill): boolean {\r\n    return this.indexOf(skill) > -1\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public get(skill: Skill): Value {\r\n    const index: number = this.indexOf(skill)\r\n    return index < 0 ? Value.zero() : this.entries.get(index).right\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public delete(skill: Skill): SkillSet {\r\n    const index: number = this.indexOf(skill)\r\n\r\n    if (index < 0) {\r\n      return this\r\n    } else {\r\n      return new SkillSet(this.entries.delete(index))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public set(skill: Skill, value: Value): SkillSet {\r\n    const index: number = this.indexOf(skill)\r\n\r\n    if (index < 0) {\r\n      return new SkillSet(this.entries.insert(-index - 1, Pair.create(skill, value)))\r\n    } else {\r\n      return new SkillSet(this.entries.set(index, Pair.create(skill, value)))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public minus(other: SkillSet): SkillSet {\r\n    const result: List<Pair<Skill, Value>> = List().asMutable()\r\n\r\n    let ourCursor: number = 0\r\n    let otherCursor: number = 0\r\n\r\n    const ourEntries: List<Pair<Skill, Value>> = this.entries\r\n    const otherEntries: List<Pair<Skill, Value>> = other.entries\r\n\r\n    while (ourCursor < ourEntries.size) {\r\n      const ourEntry: Pair<Skill, Value> = ourEntries.get(ourCursor)\r\n\r\n      while (otherCursor < otherEntries.size && comparePair(otherEntries.get(otherCursor), ourEntry) < 0) {\r\n        otherCursor += 1\r\n      }\r\n\r\n      if (otherCursor < otherEntries.size && comparePair(otherEntries.get(otherCursor), ourEntry) === 0) {\r\n        otherCursor += 1\r\n      } else {\r\n        result.push(ourEntry)\r\n      }\r\n\r\n      ourCursor += 1\r\n    }\r\n\r\n    return new SkillSet(result.asImmutable())\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public assign(other: SkillSet): SkillSet {\r\n    const result: List<Pair<Skill, Value>> = List().asMutable()\r\n\r\n    let ourCursor: number = 0\r\n    let otherCursor: number = 0\r\n\r\n    const ourEntries: List<Pair<Skill, Value>> = this.entries\r\n    const otherEntries: List<Pair<Skill, Value>> = other.entries\r\n\r\n    while (ourCursor < ourEntries.size) {\r\n      const ourEntry: Pair<Skill, Value> = ourEntries.get(ourCursor)\r\n\r\n      while (otherCursor < otherEntries.size && comparePair(otherEntries.get(otherCursor), ourEntry) < 0) {\r\n        result.push(otherEntries.get(otherCursor))\r\n        otherCursor += 1\r\n      }\r\n\r\n      if (otherCursor < otherEntries.size && comparePair(otherEntries.get(otherCursor), ourEntry) === 0) {\r\n        result.push(otherEntries.get(otherCursor))\r\n        otherCursor += 1\r\n      } else {\r\n        result.push(ourEntry)\r\n      }\r\n\r\n      ourCursor += 1\r\n    }\r\n\r\n    while (otherCursor < otherEntries.size) {\r\n      result.push(otherEntries.get(otherCursor))\r\n      otherCursor += 1\r\n    }\r\n\r\n    return new SkillSet(result.asImmutable())\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public inherit(other: SkillSet): SkillSet {\r\n    const result: List<Pair<Skill, Value>> = List().asMutable()\r\n\r\n    let ourCursor: number = 0\r\n    let otherCursor: number = 0\r\n\r\n    const ourEntries: List<Pair<Skill, Value>> = this.entries\r\n    const otherEntries: List<Pair<Skill, Value>> = other.entries\r\n\r\n    while (ourCursor < ourEntries.size) {\r\n      const ourEntry: Pair<Skill, Value> = ourEntries.get(ourCursor)\r\n\r\n      while (otherCursor < otherEntries.size && comparePair(otherEntries.get(otherCursor), ourEntry) < 0) {\r\n        otherCursor += 1\r\n      }\r\n\r\n      if (otherCursor < otherEntries.size && comparePair(otherEntries.get(otherCursor), ourEntry) === 0) {\r\n        if (ourEntry.right.base == null) {\r\n          result.push(Pair.create(\r\n            ourEntry.left,\r\n            Value.create({\r\n              base: otherEntries.get(otherCursor).right.base,\r\n              modifiers: ourEntry.right.modifiers\r\n            })\r\n          ))\r\n        } else {\r\n          result.push(ourEntry)\r\n        }\r\n        otherCursor += 1\r\n      } else {\r\n        result.push(ourEntry)\r\n      }\r\n\r\n      ourCursor += 1\r\n    }\r\n\r\n    return new SkillSet(result.asImmutable())\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public equals(other: any): boolean {\r\n    if (other == null) return false\r\n    if (other === this) return true\r\n\r\n    if (other instanceof SkillSet) {\r\n      return other.entries.equals(this.entries)\r\n    }\r\n\r\n    return false\r\n  }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAbA;AAeA;AACA;AAEA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAsBA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAlCA;AAAA;AAAA;AAmCA;AACA;AAEA;AACA;AACA;AACA;AAzCA;AACA;AAwCA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAjDA;AAAA;AAAA;AAiDA;AACA;AAEA;AACA;AACA;AACA;AAvDA;AAAA;AAAA;AAwDA;AACA;AAEA;AACA;AACA;AACA;AA9DA;AAAA;AAAA;AA+DA;AACA;AACA;AAEA;AACA;AACA;AACA;AAtEA;AAAA;AAAA;AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAnFA;AAAA;AAAA;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAhGA;AAAA;AAAA;AAiGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA/HA;AAAA;AAAA;AAgIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AArKA;AAAA;AAAA;AAsKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA/MA;AAAA;AAAA;AAgNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxNA;AACA;AADA;AAAA;AAAA;;;;A","sourceRoot":""}